# -----------------------------------------------------------------------------
function bt() {
    if [ "$1" = "" ]; then
        for tf in $(ls tests/*); do
            echo $tf
            bats $tf
        done
    else
        for tf in "$*"; do
            echo tests/$tf
            bats tests/$tf
        done
    fi
}

# -----------------------------------------------------------------------------
function path-array() {
    preIFS=$IFS
    IFS=$':'
    PL=(  $(echo $PATH) )
    echo ${PL[*]}
    IFS=$preIFS
}

# -----------------------------------------------------------------------------
function em() {
    CMD=$1
    shift

    case $CMD in
        drop)
            em-drop
        ;;
        help)
            echo "em - environment manager"
            echo " "
            echo "    help               - display this message"
            echo "    drop               - remove em functions from environment"
            echo "    load <path>        - load the env from <path>"
            echo "    save <path>        - save current env in <path>"
            echo "    path show          - show \$PATH in a readable format"
            echo "    path rm [-n] RGX   - remove \$PATH items matching RGX"
            echo "    path decap [-n]    - remove first item from \$PATH"
            echo "    path dock [-n]     - remove last item from \$PATH"
            echo "    path ladd [-n] DIR - add DIR at beginning of \$PATH"
            echo "    path radd [-n] DIR - add DIR at end of \$PATH"
        ;;
        path)
            em-path $*
        ;;
        save)
            em-save $*
        ;;
        load)
            em-load $*
        ;;
        reload)
            source $HOME/prj/em/em-setup
        ;;
        *)
            echo "Unrecognized command $CMD"
            false
        ;;
    esac
}

# -----------------------------------------------------------------------------
function funclist() {
    typeset -f
}

# -----------------------------------------------------------------------------
function em-drop() {
    for fname in $(funclist | grep "^em" | sed -e "s/ .*//"); do
        unset -f $fname
    done
    echo "Removed em functions from environment"
}

# -----------------------------------------------------------------------------
function em-load() {
    if [ "$1" = "" ]; then
        echo "'em load' requires a pathname"
        return 1
    else
        source $1
        echo "Environment loaded from $1"
    fi
}

# -----------------------------------------------------------------------------
function em-save() {
    if [ "$1" = "" ]; then
        echo "'em save' requires a pathname"
        return 1
    else
        env | sed -e "s/\([^=]*\)=\(.*\)/export \1=\"\2\"/" > $1
    fi
}

# -----------------------------------------------------------------------------
function em-path() {
    REQ=$1
    case $REQ in
        decap)
            em-path-decap $*
        ;;
        dock)
            em-path-dock $*
        ;;
        ladd)
            em-path-ladd $*
        ;;
        radd)
            em-path-radd $*
        ;;
        rm)
            em-path-rm $*
        ;;
        show)
            em-path-show
        ;;
        *)
            echo "Unrecognized path request '$REQ'"
            false
        ;;
    esac
}

# -----------------------------------------------------------------------------
function em-path-decap() {
    DRYRUN=0
    shift                               # drop 'decap'
    if [ "$1" = "-n" ]; then
        DRYRUN=1
    fi
    RVAL=$(echo $PATH | sed "s/[^:]*://")
    if [ $DRYRUN -eq 1 ]; then
        echo "would set '$RVAL'"
    else
        export PATH=$RVAL
        echo "PATH = $PATH"
    fi
}

# -----------------------------------------------------------------------------
function em-path-dock() {
    DRYRUN=0
    shift
    if [ "$1" = "-n" ]; then
        DRYRUN=1
    fi
    RVAL=$(echo $PATH | sed "s/:[^:]*$//")
    if [ $DRYRUN -eq 1 ]; then
        echo "would set '$RVAL'"
    else
        export PATH=$RVAL
        echo "PATH = $PATH"
    fi
}

# -----------------------------------------------------------------------------
function em-path-ladd() {
    DRYRUN=0
    shift  # drop 'ladd'
    DIR=$1
    if [ "$DIR" = "-n" ]; then
        DRYRUN=1
        shift
        DIR=$1
    elif [ "$DIR" = "" ]; then
        echo "'em path ladd' requires a directory argument"
        return 1
    fi
    RVAL="${DIR}:${PATH}"
    if [ $DRYRUN -eq 1 ]; then
        echo "would set '$RVAL'"
    else
        export PATH=$RVAL
        echo "PATH = $PATH"
    fi
}

# -----------------------------------------------------------------------------
function em-path-radd() {
    DRYRUN=0
    shift  # drop 'radd'
    DIR=$1
    if [ "$DIR" = "-n" ]; then
        DRYRUN=1
        shift
        DIR=$1
    elif [ "$DIR" = "" ]; then
        echo "'em path radd' requires a directory argument"
        return 1
    fi
    RVAL="${PATH}:${DIR}"
    if [ $DRYRUN -eq 1 ]; then
        echo "would set '$RVAL'"
    else
        export PATH=$RVAL
        echo "PATH = $PATH"
    fi
}

# -----------------------------------------------------------------------------
function em-path-rm() {
    DRYRUN=0
    shift # drop 'rm'
    RGX=$1
    if [ "$RGX" = "-n" ]; then
        DRYRUN=1
        shift
        RGX=$1
    elif [ "$RGX" = "" ]; then
        echo "'em path rm' requires a regex argument"
        return 1
    fi
    NP=()
    for item in $(path-array); do
        if [ $(expr "$item" : ".*$RGX") -eq 0 ]; then
            NP+=($item)
        fi
    done
    RVAL=$( IFS=':'; echo "${NP[*]}" )
    if [ $DRYRUN -eq 1 ]; then
        echo "would set '$RVAL'"
    else
        export PATH=$RVAL
        echo "PATH = $PATH"
    fi
}

# -----------------------------------------------------------------------------
function em-path-show() {
    echo $PATH | tr ":" "\n"
}

# -----------------------------------------------------------------------------
function em-path-show() {
    echo $PATH | tr ":" "\n"
}

# -----------------------------------------------------------------------------
function cshift() {
    FIRST="$1"
    shift
    return $FIRST
}
